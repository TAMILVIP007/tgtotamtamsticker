import logging
from dataclasses import dataclass
from time import sleep
import os
from typing import List

import requests
from aiohttp import web

from .TelegramStickerDownloader import TGStickerDownloader


@dataclass
class UploadResult:
    file_id: int
    token: str

@dataclass
class User:
    user_id: int
    name: str
    username: str

@dataclass
class MessageBody:
    text: str

@dataclass
class Message:
    sender: User
    body: MessageBody
# user add the bot first time
@dataclass
class UpdateBotStarted:
    chat_id: int
    user: User


# user send a message to bot
@dataclass
class UpdateMessageCreated:
    message: Message

class TamTamBot():

    routes = web.RouteTableDef()

    def __init__(self, tt_bot_token: str, telegram_bot_token: str):
        self.base_url = "https://botapi.tamtam.chat"
        self.token = tt_bot_token
        self.tg_client = TGStickerDownloader(telegram_bot_token)
        self.log = logging.getLogger()


    def api_request(self, method: str, params: dict=None):
        if params is None:
            params = {}
        params['access_token'] = self.token
        res = requests.get(f"{self.base_url}/{method}", params=params)  # type: requests.Response
        if res.status_code == 200:
            return res.text
        else:
            raise Exception(f"TT API err: {res.status_code}")

    def get_updates(self):
        return self.api_request("updates")

    def proceed_bot_started(self, data):
        update = UpdateBotStarted(
            data['chat_id'],
            User(
                data['user']['user_id'],
                data['user'].get('name', ""),
                data['user'].get('username', ""),
            )
        )
        self.send_message(update.user.user_id, 
                            "–ü—Ä–∏–≤–µ—Ç üëã\n–Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ "
                            "–∏–∑ Telegram –∏ —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –≤ TamTam\n" \
                            "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∏–º—è —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–∞\n")
        return web.Response()

    def proceed_message_created(self, data):
        if 'sender' not in data['message']:
            self.log.error("got bad update: %s", data)
            return web.Response()
        update = UpdateMessageCreated(
            Message(
                User(
                    data['message']['sender']['user_id'],
                    data['message']['sender']['name'],
                    data['message']['sender'].get('username', "")
                ),
                MessageBody(data['message']['body'].get("text", ""))
            )
        )

        tg_set_name = update.message.body.text

        tg_set = self.tg_client.get_sticker_pack_by_name(tg_set_name)
        if tg_set is None:
            self.send_message(update.message.sender.user_id,
                                f"–Ø –Ω–µ –Ω–∞—à–µ–ª –≤ Telegram –ø–∞–∫ —Å –∏–º–µ–Ω–µ–º '{tg_set_name}' üò¢\n" \
                                "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑–æ–∫!\n" \
                                "–£–∑–Ω–∞—Ç—å –∏–º—è –ª—é–±–∏–º–æ–≥–æ –ø–∞–∫–∞ –º–æ–∂–Ω–æ –≤ –∫–ª–∏–µ–Ω—Ç–µ Telergam, "
                                "–∏–ª–∏ –ø–æ–∏—Å–∫–∞—Ç—å –∑–¥–µ—Å—å: https://tlgrm.ru/stickers\n" \
                                "")
            return web.Response()

        self.send_message(update.message.sender.user_id, 
                            f"–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç, —è —É–∂–µ –≥–æ—Ç–æ–≤–ª—é –∞—Ä—Ö–∏–≤ —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏–∑ –ø–∞–∫–∞:\n{tg_set_name}: "
                            f"https://t.me/addstickers/{tg_set_name}")
        try:
            zip_names = self.tg_client.create_tamtam_zip(tg_set)
        #  TODO: better except
        except Exception as err:
            self.log.error("error while proceed pack %s: %s",tg_set, err)
            self.send_message(update.message.sender.user_id, 
                            "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –ø–∞–∫.\n" \
                            "–ó–∞–º—É—Ç—å –º–µ–Ω—è, –µ—Å–ª–∏ —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞—é—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å. –Ø –µ—â–µ –º–æ–ª–æ–¥ –∏ —Å–∫–æ—Ä–æ –≤—Å–µ –±—É–¥–µ—Ç –ª—É—á—à–µ üòâ")
            return web.Response()

        #  send zip to user
        zip_files = self.upload_files(zip_names)
        attachments = []
        for zip_file in zip_files:
            attachments.append({
                "type": "file",
                "payload": {
                    "token": zip_file.token
                }
            })

        text = "–ì–æ—Ç–æ–≤–æ ü•≥\n–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–∫ –≤ –¢–∞–º–¢–∞–º –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤:\n" \
                "–ü–∏—à–µ–º –±–æ—Ç—É: https://tt.me/stickers\n" \
                "–î–µ–ª–∞–µ–º –≤—Å–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞. –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:\n" \
                "- —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞–∫\n" \
                "- –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç—É—Ç zip —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏, –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç, —á—Ç–æ –≤—Å–µ –æ–∫\n" \
                "- –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π\n" \
                "- ...\n" \
                "- PROFIT!\n"

        if len(attachments) == 1:
            self.send_message(update.message.sender.user_id, text, attachments=attachments)
        else:
            self.send_message(update.message.sender.user_id, text)
            self.send_message(update.message.sender.user_id, "–¢–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –≤ –∏—Å—Ö–æ–¥–Ω–æ–º Telegram –ø–∞–∫–µ –±–æ–ª—å—à–µ 50-—Ç–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤.\n"\
                "–¢–∞–º–¢–∞–º —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ 50 —à—Ç—É–∫ –≤ –æ–¥–Ω–æ–º –∞—Ä—Ö–∏–≤–µ.\n"
                "–Ø –ø—Ä–∏—à–ª—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä—Ö–∏–≤–æ–≤, –∏—Ö –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É (https://tt.me/stickers) –ø–æ –æ—á–µ—Ä–µ–¥–∏, –¥–æ–∂–∏–¥–∞—è—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—à–µ–≥–æ.")
            for attach in attachments:
                self.send_message(update.message.sender.user_id, "", attachments=[attach])

        return web.Response()

    async def proceed(self, request):
        data = await request.json()
        self.log.debug("got update from tamtam api: %s", data)

        if 'update_type' not in data:
            self.log.error("bad update without type: %s", data)
            return web.Response()

        if data['update_type'] == 'bot_started':
            self.proceed_bot_started(data)

        elif data['update_type'] == 'message_created':
            self.proceed_message_created(data)

        self.log.error("got unknown update type: %s", data)
        return web.Response()


    def get_upload_url(self, file_type="file"):
        params = {
            "access_token": self.token,
            "type": file_type
        }
        # TODO exceptions
        res = requests.post(f"{self.base_url}/uploads", params=params).json()
        self.log.debug("upload url: %s", res)
        return res['url']

    def upload_files(self, file_paths: List[str]) -> List[UploadResult]:
        upload_results = []
        for file_path in file_paths:
            upload_url = self.get_upload_url()
            with open(file_path,'rb') as fb:
                file_to_upload = {'file': (f'{file_path.split("/")[-1]}', fb, 'multipart/form-data')}
                res = requests.post(upload_url, files=file_to_upload).json()
                os.remove(file_path)
                upload_results.append(UploadResult(res['fileId'], res['token']))
        return upload_results


    def send_message(self, user_id: int, text: str, attachments: list=None, no_link_preview=True):
        param = {
            "access_token": self.token,
            "user_id": user_id,
            "disable_link_preview": no_link_preview
        }
        data = {
            "text": text
        }
        if attachments is not None:
            data['attachments'] = attachments

        not_ok = True
        max_tries = 5
        sleep_time = 1
        while not_ok:
            res = requests.post(f"{self.base_url}/messages", json=data, params=param)
            self.log.info("sending msg to user %s: %s", user_id, text)
            if res.status_code == 200:
                not_ok = False
            # https://dev.tamtam.chat/#operation/sendMessage
            # It may take time for the server to process your file (audio/video or any binary).
            # While a file is not processed you can't attach it. It means the last step will fail with 400 error.
            # Try to send a message again until you'll get a successful result.
            if res.status_code == 400 and "file.not.processed" in res.json()["message"]:
                self.log.debug("sleep and retry...")
                sleep(sleep_time)
                max_tries -= 1
                sleep_time += 1
                if max_tries == 0:
                    self.send_message(user_id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ –¢–∞–º–¢–∞–º, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                    return web.Response()
                continue

            if res.status_code != 200:
                self.log.error("can't send msg to user %s, statis: %s %s", user_id, res.status_code, res.text)
                return web.Response()

    def run(self):
        app = web.Application()
        app.add_routes([web.post('/', self.proceed)])
        web.run_app(app, port=19999)

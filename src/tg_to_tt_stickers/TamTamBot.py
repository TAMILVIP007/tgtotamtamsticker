
import logging
from dataclasses import dataclass
from time import sleep
import os

import requests
from aiohttp import web

from .TelegramStickerDownloader import (StickersSetNotFoundException, TGStickerDownloader)


@dataclass
class UploadResult:
    file_id: int
    token: str

@dataclass
class update:
    sender_id: int
    sender_name: str
    sender_username: str
    message_text: str
    update_type: str

class TamTamBot():

    routes = web.RouteTableDef()

    def __init__(self, tt_bot_token: str, telegram_bot_token: str):
        self.base_url = "https://botapi.tamtam.chat"
        self.token = tt_bot_token
        self.tg_client = TGStickerDownloader(telegram_bot_token)
        self.log = logging.getLogger()


    def api_request(self, method: str, params: dict=None):
        if params is None:
            params = {}
        params['access_token'] = self.token
        res = requests.get(f"{self.base_url}/{method}", params=params)  # type: requests.Response
        if res.status_code == 200:
            return res.text
        else:
            raise Exception(f"TT API err: {res.status_code}")

    def get_updates(self):
        return self.api_request("updates")

    async def proceed(self, request):
        print("values:", request.values)
        print("query_string:", request.query_string)
        print("json:", request.json)
        data = await request.json()
        u = update(
            data['message']['sender']['user_id'],
            data['message']['sender']['name'],
            data['message']['sender']['username'],
            data['message']['body']['text'],
            data['update_type']
        )

        tg_set_name = u.message_text

        self.send_message(u.sender_id, f"–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç, —è —É–∂–µ –≥–æ—Ç–æ–≤–ª—é –∞—Ä—Ö–∏–≤ —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏–∑ –ø–∞–∫–∞:\n{tg_set_name}: https://t.me/addstickers/{tg_set_name}")
        try:
            self.tg_client.get_sticker_pack_by_name(tg_set_name)
        except StickersSetNotFoundException:
            text = "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å Telegram –∏ –ø–æ–º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –≤ TamTam\n" \
                    "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∏–º—è –ø–∞–∫–∞.\n" \
                    f"–Ø –Ω–µ –Ω–∞—à–µ–ª –≤ Telegram –ø–∞–∫ —Å –∏–º–µ–Ω–µ–º '{tg_set_name}' üò¢\n" \
                    "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑–æ–∫!\n" \
                    "–£–∑–Ω–∞—Ç—å –∏–º—è –ª—é–±–∏–º–æ–≥–æ –ø–∞–∫–∞ –º–æ–∂–Ω–æ –≤ –∫–ª–∏–µ–Ω—Ç–µ Telergam, –∏–ª–∏ –ø–æ–∏—Å–∫–∞—Ç—å –∑–¥–µ—Å—å: https://tlgrm.ru/stickers"
            self.send_message(u.sender_id, text)
            return web.Response()

        zip_name = self.tg_client.create_tamtam_zip(u.message_text)

        #  send zip to user
        zip_file = self.upload_file(zip_name)
        attach = {
            "type": "file",
            "payload": {
                "token": zip_file.token
            }
        }
        text = "–ì–æ—Ç–æ–≤–æ ü•≥\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–∞–∫ –≤ –¢–∞–º–¢–∞–º –Ω–∞–¥–æ –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∫–ª–∏–∫–∞—Ç—å:\n" \
                "–ü–∏—à–µ–º –±–æ—Ç—É –≤ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞—Ö(—Å—Å—ã–ª–∫–∏ –≤ –¢–¢ –Ω–∞ –Ω–µ–≥–æ –Ω–µ—Ç ü§∑‚Äç‚ôÇÔ∏è): https://ok.ru/okstickers\n" \
                "–î–µ–ª–∞–µ–º –≤—Å–µ –ø–æ –æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞ okstickers. –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:\n" \
                "- –∂–º–µ–º \"–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤\"\n" \
                "- –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç—É—Ç zip —Å–æ —Å—Ç–∏–∫–µ—Ä–∞–º–∏\n" \
                "- –∂–º–µ–º \"–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ\"\n" \
                "- –ø–∏—à–µ–º –∏–º—è, –∫–∞–∫ –ø–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ –¢–¢ –∏ –û–ö(—É–¥–æ–±–Ω–æ –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫ –∂–µ, –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ Telegram)" \
                "- –∂–º–µ–º \"–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å\"\n" \
                "- ...\n" \
                "–î—É–º–∞–µ—à—å, —ç—Ç–æ –≤—Å–µ? –ê –≤–æ—Ç –∏ –Ω–µ—Ç. –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã –Ω–∞–¥–æ –æ—Ç–∫—Ä—ã—Ç—å –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å –ª—é–±—É—é –ø–µ—Ä–∏–ø–∏—Å–∫—É. –ò–º–µ–Ω–Ω–æ —Ç–∞–º, –≤ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞—Ö, –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –Ω–æ–≤—ã–π –ø–∞–∫. –°–∫–æ—Ä–µ–µ –∂–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä –≤ –ª—é–±–æ–π —á–∞—Ç! –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É –ø–µ—Ä–∏–ø–∏—Å–∫—É –≤ –¢–¢ –∏ –æ—Ç—Ç—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–∫ –≤ –¢–¢. –¢–∞–∫–∏–µ –¥–µ–ª–∞. –í–æ—Ç —Ç–µ–ø–µ—Ä—å –≤—Å–µ, –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π üôÇ"

        self.send_message(u.sender_id, text, attach=attach)

        return web.Response()


    def get_upload_url(self, file_type="file"):
        params = {
            "access_token": self.token,
            "type": file_type
        }
        # TODO exceptions
        res = requests.post(f"{self.base_url}/uploads", params=params).json()
        self.log.debug("upload url: %s", res)
        return res['url']

    def upload_file(self, file_path: str) -> UploadResult:
        upload_url = self.get_upload_url()
        with open(file_path,'rb') as fb:
            file_to_upload = {'file': (f'{file_path.split("/")[-1]}', fb, 'multipart/form-data')}
            res = requests.post(upload_url, files=file_to_upload).json()
            os.remove(file_path)
        return UploadResult(res['fileId'], res['token'])


    def send_message(self, user_id: int, text: str, attach: dict=None):
        param = {
            "access_token": self.token,
            "user_id": user_id
        }
        data = {
            "text": text
        }
        if attach is not None:
            data['attachments'] = []
            data['attachments'].append(attach)

        not_ok = True
        max_tries = 5
        sleep_time = 1
        while not_ok:
            res = requests.post(f"{self.base_url}/messages", json=data, params=param)
            self.log.info("sending msg to user %s: %s", user_id, text)
            if res.status_code == 200:
                not_ok = False
            # https://dev.tamtam.chat/#operation/sendMessage
            # It may take time for the server to process your file (audio/video or any binary). 
            # While a file is not processed you can't attach it. It means the last step will fail with 400 error. 
            # Try to send a message again until you'll get a successful result.
            if res.status_code == 400 and "file.not.processed" in res.json()["message"]:
                self.log.debug("sleep and retry...")
                sleep(sleep_time)
                max_tries -= 1
                sleep_time += 1
                if max_tries == 0:
                    self.send_message(user_id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ –¢–∞–º–¢–∞–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                    web.Response()
                continue

            if res.status_code != 200:
                self.log.error("can't send msg to user %s, statis: %s %s", user_id, res.status_code, res.text)

        self.log.debug("msg was sent")

    def run(self):
        app = web.Application()
        app.add_routes([web.post('/', self.proceed)])
        web.run_app(app, port="19999")
